;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |Radix-sort(alone) 7-9|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "abstraction.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "abstraction.rkt" "teachpack" "2htdp")) #f)))
;7 Design and implement a function to find the number of digits in the longest
;integer in a (vectorof integer).

; Purpose: Check if an interval is empty or not
; Input: Vector -> True or False if the vector is empty 
(define (empty-VINT? low high) (> low high))
; Purpose: To find the number with the highest value in a vector
; (vectorof number) -> number
; Termination: This terminates because the function will reach the end of the vector and the recursion will stop.
;digitnum will read if n is less then 10 and will stop dividing and return the amount of times it divided.
(define (Max V)
  (local [
          ;Contract:(digitnum (vectorof numbers)-> amount of digits in highest number in the vector
          ;Purpose: digitnum, finds the digits of the inputted number 
          ;accumulator invariant:Temp is the current of times n has been divided.
          ;by 10 until it is equal to or less then 10 and returns the amount
          (define (digitnum n temp)
            (cond [(< n 10)temp]
                  [else (digitnum (/ n 10) (add1 temp))]))
          ; Contract: (max-help(vectorof number)) -> max
          ; Purpose: To find the highest valued number in a vector        
          ; max is the highest valued number in the processed
          ; part of the vector [0...low]
          (define (max-help low high max)
            (cond[(empty-VINT? low high) max] 
                 [(> (vector-ref V low) max)
                  (max-help (add1 low) high(vector-ref V low))]
                 [else (max-help (add1 low) high max)]))]
    (digitnum (max-help 0 (sub1 (vector-length V)) (vector-ref V 0)) 1))) 

;check-expects for Max function
(check-expect (Max (vector 258 852)) 3)
(check-expect (Max (vector 4282022)) 7)
(check-expect (Max (vector 1 2 3 4 5 6 7 8 9)) 1)
(check-expect (Max (vector 0 0 0)) 1)
(check-expect (Max (vector 9 10 21)) 2)
(check-expect (Max (vector 3003 3002 3001 30003)) 5)
(check-expect (Max (vector 1000000 2000000)) 7)
(check-expect (Max (vector 3 3 9)) 1)















;8 Design and implement an interface for a bucket of integers. A bucket of
;integers offers the following services:
;add!: mutates a bucket to add a given integer
;dump!: dumps the bucket elements into the given vector starting
;at the given index and mutates the bucket to become empty
;size: returns the number of elements in the bucket
;elems: returns a vector containing the bucket elements




;Bucket-D is the vector
;Bucket-V is the bucket
;Contract: (vector)-> (vector)
;Purpose: an interface for a bucket of integers. A bucket of
;integers offers the following services: add!, dump!, size and elems.
(define (make-bucket num)
  (local [
          ;bucket-V holds numbers in Bucket currently
          ;Contract: number-> bucket
          ;num: is the number inputted
          (define bucket-V (build-vector num (lambda (i) (void))))
          ;index: keeps track of next available slot in the bucket 
          (define index 0)
          ;Contract: add!-bucket: vector->bucket
          ;Purpose:Purpose: mutates a bucket to add a given integer
          (define (add!-bucket num)
            (begin
              (vector-set! bucket-V index num)
              (set! index (add1 index))))
          ;set!: adds one to the index which starts at 0 to 
          ;Contract: vector->bucket
          ;Purpose:;dump!-bucket: dumps the bucket elements into the given vector starting;bucket-d
          ;dumpindex: Dumps numbers before Num to vector
          (define (dump!-bucket D dumpindex)
            (local[ (define (dump-helper dlow dhigh vlow vhigh)
                      (cond [(empty-VINT? vlow vhigh) (void)]              ; check if low is greater than high of bucket V 
                            [(empty-VINT? dlow dhigh) (error "It's Empty")]; check if low is greater than high of bucket D
                            [else  
                             (begin
                               (vector-set! D dlow (vector-ref bucket-V vlow))
                               ;set!  sets Bucket-V to the lowest integer of the Bucket          
                               (vector-set! bucket-V vlow (void))
                               ;set! sets bucket-D to the lowest integer of the vector
                               (dump-helper (add1 dlow) dhigh (add1 vlow) vhigh))]))]
              (begin
                (dump-helper dumpindex (sub1 (vector-length D))
                             0 (sub1 index)) 
                (set! index 0))))
          ;Purpose: Manager: Manages the add!, dump!, size,
          ;and  elems of a bucket
          (define (manager a-mess)
            (cond [(equal? a-mess 'add) add!-bucket]
                  [(equal? a-mess 'dump) dump!-bucket]
                  [(equal? a-mess 'size) index]
                  [(equal? a-mess 'elems)  bucket-V]
                  [else (error "bucket unkown")]))]
    manager))


;Wrapper functions
;Purpose:  mutates a bucket to add a given integer
;Contract: Interger bucket -> (void)
;Effect: Bucket-V at the Index recieved value of n and the index index is increased
;value = V number we add
;Bucket = B the bucket with the numbers in it 
(define (bucket-add! B V)
  ((B 'add) V))

;Contract: bucket-> (void)
;Purpose: Move all bucket numbers into the vector
;Effect: moves digits to the vector to be dumped 
(define (bucket-dump! dumpindex D index)
  ((dumpindex 'dump) D index))
  
; bucket-size!: bucket -> number
; Purpose: gives next spot in the bucket
(define (bucket-size! B)
  (B 'size))


; bucket-elems: the bucket -> vectorof num
; Purpose: gives the vector with bucket elements that are inside it
(define (bucket-elems! B)
  (B 'elems))

;----------------------------------------------------------------------- 
(define Buck1 (make-bucket 10))
(define Buck2 (build-vector 10 (lambda (i) 0)))
(define Buck3 (build-vector 10 (lambda (i) (make-bucket 10))))


(check-expect (begin
                (bucket-add! Buck1 40)
                (bucket-add! Buck1 97)
                (bucket-dump! Buck1 Buck2 0)
                Buck2)
              (vector 40 97 0 0 0 0 0 0 0 0))

(check-expect (bucket-size! Buck1) 0)
(check-expect (bucket-elems! Buck1) (vector
                                     (void)
                                     (void)
                                     (void)
                                     (void)
                                     (void)
                                     (void)
                                     (void)
                                     (void)
                                     (void)
                                     (void)))
;------------------------------------------------------------------------------------------------------------
;9 Design and implement a mutator to sort a vector in place using radix sorting. Be mindful that an integer may be negative.
;First design and implement ;your mutator assuming that all vector elements are nonnegative. Afterwards,
;decide how to refine your program to sort a vector that includes negative
;integers.


;Contract: vectorof numbers -> vector of numbers radix sorted
;Purpose: sort a vector in place using radix sorting
;Effect: The vectors numbers are moved in and out to be in place radix sorted
(define (radix-sort RadVec)
  (local[
         ; Purpose: Check if an interval is empty or not
         ; Input: Vector -> True or False if the vector is empty 
         (define (empty-VINT? low high) (> low high))
         ; Purpose: To find the number with the highest value in a vector
         ; (vectorof number) -> number
         ; Termination: This terminates because the function will reach the end of the vector and the recursion will stop.
         ;digitnum will read if n is less then 10 and will stop dividing and return the amount of times it divided.
         (define (Max V)
           (local [
                   ;Contract:(digitnum (vectorof numbers)-> amount of digits in highest number in the vector
                   ;Purpose: digitnum, finds the digits of the inputted number 
                   ;accumulator invariant:Temp is the current of times n has been divided.
                   ;by 10 until it is equal to or less then 10 and returns the amount
                   (define (digitnum n temp)
                     (cond [(< n 10)temp]
                           [else (digitnum (/ n 10) (add1 temp))]))
                   ; Contract: (max-help(vectorof number)) -> max
                   ; Purpose: To find the highest valued number in a vector        
                   ; max is the highest valued number in the processed
                   ; part of the vector [0...low]
                   (define (max-help low high max)
                     (cond[(empty-VINT? low high) max] 
                          [(> (vector-ref V low) max)
                           (max-help (add1 low) high(vector-ref V low))]
                          [else (max-help (add1 low) high max)]))]
             (begin (abs-val! V)
                    (digitnum (max-help 0 (sub1 (vector-length V)) (vector-ref V 0)) 1))))
         
         (define buc-vec (build-vector 10 (lambda (i) (make-bucket (vector-length RadVec)))))
         ;Contract: three Numbers inside of the vector -> (void)
         ;Purpose: adding elements different buckets
         ;Effect: given the vector adding elements to different buckets        
         (define (bucketize! low! high! Remand)
           (cond[(empty-VINT? low! high!) (void)]
                [else 
                 (begin
                   ;Contract: add!-bucket: vector->bucket
                   ;Purpose:Purpose: mutates a bucket to add a given integer
                   (bucket-add! 
                    ;Accumulator: Remand is if it has been divided by 1, 10, or 100
                    ;Modulo returns reminder of division 
                    (vector-ref buc-vec (modulo (floor (/ (vector-ref RadVec low!) Remand)) 10))
                    (vector-ref RadVec low!))
                   (bucketize! (add1 low!) high! Remand))]))
         ;Purpose: debucketize to empty the bucket to that point of delow and dehigh  
         ;Contract: Numbers inside of hthe vector -> (void)
         ;Effect: moves elements of the vector to the bucket 
         (define (debucketize delow dehigh lowcont)
           (cond [(empty-VINT? delow dehigh) (void)]
                 [else
                  (local [(define new-index (+ (bucket-size! (vector-ref buc-vec delow)) lowcont))]
                    (begin
                      ;Contract: vector->bucket
                      ;Purpose:  dump!-bucket: dumps the bucket elements into the given vector starting
                      ;lowcont counts low of the bucket vector is changing with the count
                      (bucket-dump! (vector-ref buc-vec delow) RadVec lowcont)
                      (debucketize (add1 delow) dehigh new-index)))]))

         ;Purpose:sort-out to preform radix sort on the bucket
         ;Contract: [int] number  -> (void)
         ;Accumulator Invarient: digit: is the current number being sorted in the bucket
         ;sum digits of max num
         (define (sort-out  sum digit) 
           (cond[(= sum 0)(void)]
                [else (begin
                        (bucketize! 0 (sub1 (vector-length RadVec)) digit) 
                        (debucketize 0 (sub1 (vector-length buc-vec)) 0 )
                        (sort-out (sub1 sum)(* digit 10)))]))] 
    (sort-out (Max RadVec) 1)))

;Contract: [int] number  -> (void)
;Purpose: Finds the absolute value of the numbers inside the vector
;Effect: Sets the digits in the vector to the absolute value to help sort the vector
(define (abs-val! V )
  (local [
          (define (abs-helper low high)
            (cond[(empty-VINT? low high) (void)]
                 [else
                  (begin
                    ;vector-set!: 
                    (vector-set! V low (abs (vector-ref V low)))
                    (abs-helper (add1 low) high))]))]
    (abs-helper 0 (sub1 (vector-length V)))))



;check-expects for radix-sort
(define shovel (vector 989 87 69 58 111 9))
(check-expect (begin (radix-sort shovel) shovel) (vector 9 58 69 87 111 989))
(define shovel2 (vector 0))
(check-expect (begin (radix-sort shovel2) shovel2) (vector 0))
;(define shovel3 (vector 19 95 21 9 10 8 -1))
;(check-expect (begin (radix-sort shovel3) shovel3) (vector 8 9 10 19 21 95 -1))
;(define shovel4 (vector -19 -95 -21 -9 -10 -8 -1))
;(check-expect (begin (radix-sort shovel4) shovel4) (vector -10 -19 -9 -8 -95 -21 -1))
